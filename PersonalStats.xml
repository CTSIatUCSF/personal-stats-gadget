<?xml version="1.0" encoding="UTF-8"?>
<Module>
	<ModulePrefs title="Profile Page Statistics" author="Dan Hoffman">
		<OAuth2>
		  <Service name="googleAPIv3" scope="https://www.googleapis.com/auth/analytics.readonly">
		  </Service>
		</OAuth2>
		<Require feature="views"/>
		<Require feature="settitle"/>
		<Require feature="osapi"/>
		<!-- Require feature="minimessage" /-->
		<!-- Require feature="dynamic-height" /-->
		<Require feature="orng"/>
		<Require feature="jsonld"/>
		<!-- Require feature="start-hidden" /-->
		<Require feature="setprefs" />
	</ModulePrefs>
	<Content type="html" view="canvas, small"><![CDATA[<!--HTML-->
    <!DOCTYPE html>
    
        <!-- #includes -->
        <link rel="stylesheet" href="css/gadget.css" type="text/css" media="screen, projection" >
        <link rel="stylesheet" href="css/inst.css" type="text/css" media="screen, projection" >
        <link rel="stylesheet" href="css/jquery-ui.min.css" type="text/css" media="screen, projection" >
	    <script type="text/javascript" src="js/os.js" ></script>
	    <script type="text/javascript" src="js/ontology.js" ></script>
        <script type="text/javascript" src="js/jquery-1.11.1.min.js"></script>
        <script type="text/javascript" src="js/jquery-ui.min.js"></script>
        <script type="text/javascript" src="js/jsonld.js" ></script>
        <script type="text/javascript" src="js/environment.js"></script>
                
        <style>
            .tool_title {font-size:14px;}
            .tool_title_orange {font-weight:bold; font-size:14px; color:#CA7C29;margin-top:-1px;}
            .tool_body {font-size:12px;}
            .tool_credit {font-size:10px;}
            .tool_table_cell {ffont-size:12px; padding:0 20px 0 0;}
            .tool_table_cell_small {font-size:11px;}
            .tool_table_cell_small span a {font-size:11px;}
            .tool_table_cell_small span {font-size:11px;display:inline-block;margin-right: -15px; }
            .tool_toggle_button {font-size: 13px;padding:0 5px;}          
    	</style>

        <script type="text/javascript">
        	
        	Date.prototype.yyyy_mm_dd = function() {
        		var yyyy = this.getFullYear().toString();
        	    var mm = (this.getMonth()+1).toString(); // getMonth() is zero-based
        	    var dd  = this.getDate().toString();
        	    return yyyy + "-" + (mm[1]?mm:"0"+mm[0]) + "-" + (dd.length===2?dd:"0"+dd[0]); // padding
        	};

        	Date.prototype.yyyymmdd = function() {
        		var yyyy = this.getFullYear().toString();
        	    var mm = (this.getMonth()+1).toString(); // getMonth() is zero-based
        	    var dd  = this.getDate().toString();
        	    return yyyy + (mm[1]?mm:"0"+mm[0]) + (dd.length===2?dd:"0"+dd[0]); // padding
        	};
        </script>]]>
	</Content>
	<Content type="html" view="small" preferred_height="75" preferred_width="190"><![CDATA[<!--HTML-->
    <!DOCTYPE html>
  
  		<table id="button_and_help" cellspacing="2" cellpadding="0" style="display:block;">
 				<tr>
 						<td class="tool_table_cell_small" style="width:160px;padding:4px 0">
							<a id="linkToCanvas"href=linkClicked()>Click here for canvas view.</a>
						</td>
 				</tr>
 		</table>
        
        <img id="waiting" src="images/waiting.gif" style="display:none;">
        
        <script type="text/javascript">
        	var viewerURI;

            function init() {

				osapi.jsonld.getViewer().execute(function(viewerData) {
					viewerURI = viewerData.uris[0];

					//don't enable the link until we have the viewer data
					$('#linkToCanvas').click(function(){ 
						linkToCanvasClicked();
						return false;
					});
				});
            }
			
			function linkToCanvasClicked() {
		    	gadgets.views.requestNavigateTo("canvas", {}, viewerURI);
			}
		
            gadgets.util.registerOnLoadHandler(init);
        </script>]]></Content>
	<Content type="html" view="canvas" preferred_height="1000" preferred_width="940"><![CDATA[<!--HTML-->
    <!DOCTYPE html>
           <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css">
           <link rel="stylesheet" href="css/personal-stats.css" type="text/css" />
		   <link type="text/css" rel="stylesheet" href="css/overlay.css" />
           <script type="text/javascript" src="js/jquery.blockUI-2.66.0.js"></script>
    
        <div class="gadget-content">
        	<div>
	    		<div id="view_count_last_year" class="stats-title">This is the Personal Stats Gadget's canvas page.</div>
	    		
				<div id="chart_container" class="stats-chart"></div>

				<div id="view_count_table" class="stats-table">
						<div class="stats-table-item-left">
							<div class="stats-text">So Far This Month</div>
							<div id="view_count_this_month" class="stats-text-large"></div>
							<div class="stats-text">Visitors</div>
						</div>
						<div class="stats-table-item-center">
							<div class="stats-text">Best Month Ever</div>
							<div id="view_count_best_month" class="stats-text-large"></div>
							<div class="stats-text">Visitors</div>
						</div>
						<div class="stats-table-item-right">
							<div id="view_count_all_time_since" class="stats-text"></div>
							<div id="view_count_all_time" class="stats-text-large"></div>
							<div class="stats-text">Visitors</div>
							<div class="stats-text-small">* First month data is available for your profile page</div>
						</div>
				</div>
				<div id="geo-panel" class="panel">
					<div id="geo-panel-header">
						<div class="panel-title">Views By Country</div>
						<div class="panel-button-area">
							<div class="geo date-toggle toggle-btn-grp joint-toggle">
							    <label onclick="" class="toggle-btn"><input type="radio" name="countryToggle"/>Last 30 Days</label><label onclick="" class="toggle-btn"><input type="radio" name="countryToggle"/>Last Year</label>
							</div>
						</div>
					</div>
					<img id="map-usa" class="map-button toggle-btn" src="http://cranestylelabs.github.io/personal-stats-gadget/images/map-usa.png"></img>
					<img id="map-world" class="map-button toggle-btn" src="http://cranestylelabs.github.io/personal-stats-gadget/images/map-world.png"></img>
					<div class="panel-data-area">
						<div id="geo-list-area">
				    		<table class="panel-list">
					    		<tr class="panel-list-header-row">
					    			<th class="panel-list-header">City</th>
					    			<th class="panel-list-header panel-list-count">Views</th>
					    		</tr>
					    	</table>
							<table id="geo-list" class="panel-list"></table>
							<div class="geo see-more toggle-btn">See All</div>
						</div>
					</div>
				</div>
				<div id="domain-panel" class="panel">
					<div class="panel-title">Views By Company/Domain</div>
					<div class="panel-button-area">
						<div class="domain date-toggle toggle-btn-grp joint-toggle">
						    <label onclick="" class="toggle-btn"><input type="radio" name="domainToggle"/>Last 30 Days</label><label onclick="" class="toggle-btn"><input type="radio" name="domainToggle"/>Last Year</label>
						</div>
					</div>
					<div class="panel-data-area">
						<div id="domain-list-area">
				    		<table class="panel-list">
					    		<tr class="panel-list-header-row">
					    			<th class="panel-list-header">Domain</th>
					    			<th class="panel-list-header panel-list-count">Views</th>
					    		</tr>
					    	</table>
							<table id="domain-list" class="panel-list"></table>
							<div class="domain see-more toggle-btn">See All</div>
						</div>
					</div>
				</div>
				<div id="related-people-panel" class="panel">
					<div class="panel-title">Your Visitors Also Viewed</div>
					<div id="related-people-list"></div>
					<div class="related-people see-more toggle-btn">See All</div>
				</div>
				<div id="instructions-panel" class="panel">
					<div id="instructions-section-one">
						<div class="panel-title">Want more visitors?</div>
					</div>
					<div id="instructions-section-two">
						<div class="panel-title">Want more clicks from visitors?</div>
					</div>
				</div>
		    </div>

		    <div class="overlay-bg">
		    </div>
		    <div class="overlay-content overlay-geo-list">
		    	<div class="overlay-content-frame">
			    	<div class="stats-title overlay-title">All Geo Data</div>
			    		<table class="panel-list">
				    		<tr class="panel-list-header-row">
				    			<th class="panel-list-header">City</th>
				    			<th class="panel-list-header panel-list-count">Views</th>
				    		</tr>
				    	</table>
			    	<div class="overlay-content-scrollable">
				    	<table id="geo-list-all" class="panel-list"></table>
			    	</div>
			        <div class="overlay-btn">
				        <div class="close-btn toggle-btn">Close</div>
				    </div>
			    </div>
		    </div>
		    <div class="overlay-content overlay-domain-list">
		    	<div class="overlay-content-frame">
			    	<div class="stats-title overlay-title">All Domain Data</div>
				    	<table class="panel-list">
				    		<tr class="panel-list-header-row">
				    			<th class="panel-list-header">Domain</th>
				    			<th class="panel-list-header panel-list-count">Views</th>
				    		</tr>
				    	</table>
			    	<div class="overlay-content-scrollable">
				    	<table id="domain-list-all" class="panel-list"></table>
				    </div>
			        <div class="overlay-btn">
				        <div class="close-btn toggle-btn">Close</div>
				    </div>
			    </div>
		    </div>
		    <div class="overlay-content overlay-content-wide overlay-map-usa">
		    	<div class="stats-title overlay-title">Views By State</div>
		        <div id="geo-chart-usa" class="geo-chart"></div>
		        <div class="overlay-btn">
			        <div class="close-btn toggle-btn">Close</div>
			    </div>
		    </div>
		    <div class="overlay-content overlay-content-wide overlay-map-world">
		    	<div class="stats-title overlay-title">Views By Country</div>
		        <div id="geo-chart-world" class="geo-chart"></div>
		        <div class="overlay-btn">
			        <div class="close-btn toggle-btn">Close</div>
			    </div>
		    </div>
		    <div class="overlay-content overlay-related-people-list">
		    	<div class="overlay-content-frame">
			    	<div class="stats-title overlay-title">Your Visitors Also Viewed</div>
			    	<div class="overlay-content-scrollable">
				    	<div id="related-people-list-all"></div>
				    </div>
			        <div class="overlay-btn">
				        <div class="close-btn toggle-btn">Close</div>
				    </div>
			    </div>
		    </div>
	    </div>
	
		<!--Load the Google AJAX API-->
		<script type="text/javascript" src="https://www.google.com/jsapi"></script>

		<script language="JavaScript" type="text/javascript">

			window.personalStats = window.personalStats || { };

			var viewerData, aggregatedByMonthAll, aggregatedByMonthLastYear, aggregatedByCityLastYear, aggregatedByCityLastMonth, aggregatedByCountryLastYear, aggregatedByCountryLastMonth, countryCodeList, aggregatedByDomainLastYear, aggregatedByDomainLastMonth, aggregatedByAlsoViewed;
			var onlyShow = 10;

	        // Load the Visualization API and the column chart package.
	        google.load("visualization", "1.0", {"packages":["corechart", "geochart"]});

	        function populateInstructionsPanel() {
	        	var viewerHomePage = viewerData[FOAF("workplaceHomepage")];
	        	var profilesLoginPage = "http://profiles.ucsf.edu/login/default.aspx?method=login&edit=true";

		        $("#instructions-section-one").append("<p>Add <a href=" + viewerHomePage + ">" + viewerHomePage + "</a> to your email footer, business card and department site.</p>");
		        $("#instructions-section-one").append("<p>Add more personalized content (overview, awards, videos) to <a href=" + profilesLoginPage + "> your profile page.</p>");
				$("#instructions-section-one p").addClass("panel-text");

		        $("#instructions-section-two").append("<p><a href=" + profilesLoginPage + ">Add more sections</a> to your page.</p>");
				$("#instructions-section-two p").addClass("panel-text");

	        }

	        // Set up the toggle buttons
	        $(".toggle-btn input[type=radio]").addClass("visuallyhidden"); // hide the radio button circle on all buttons

	        $(".date-toggle .toggle-btn input[type=radio]").change(function() {
	            if( $(this).attr("name")) {
	                $(this).parent().addClass("success").siblings().removeClass("success")
	            } else {
	                $(this).parent().toggleClass("success");
	            }
	        });

	        $(".geo.date-toggle .toggle-btn input[type=radio]").first().click(function() {
	        	console.log("country-month selected");
	            showViewsByCity(aggregatedByCityLastMonth, "geo-list", onlyShow);
	        });

	        $(".geo.date-toggle .toggle-btn input[type=radio]").last().click(function() {
	            console.log("country-year selected");
	            showViewsByCity(aggregatedByCityLastYear, "geo-list", onlyShow);
	        });
	        $(".domain.date-toggle .toggle-btn input[type=radio]").first().click(function() {
	        	console.log("domain-month selected");
	            showViewsByDomain(aggregatedByDomainLastMonth, "domain-list", onlyShow);
	        });

	        $(".domain.date-toggle .toggle-btn input[type=radio]").last().click(function() {
	            console.log("domain-year selected");
	            showViewsByDomain(aggregatedByDomainLastYear, "domain-list", onlyShow);
	        });

	        // Turn on the first toggle button for each panel
	        $(".geo.date-toggle .toggle-btn input[type=radio]").first().parent().addClass("success");
	        $(".domain.date-toggle .toggle-btn input[type=radio]").first().parent().addClass("success");

	        $("#map-world").click(function() {
	        	if ($(".geo.date-toggle .toggle-btn input[type=radio]").first().parent().hasClass("success")) {
		        	console.log("world map button clicked - last month");
		            drawGeoChart_World(aggregatedByCountryLastMonth);
	        	} else {
		        	console.log("world map button clicked - last year");
		            drawGeoChart_World(aggregatedByCountryLastYear);
	        	}
	        	showOverlay("map-world");
	        });

	        $("#map-usa").click(function() {
	        	if ($(".geo.date-toggle .toggle-btn input[type=radio]").first().parent().hasClass("success")) {
		        	console.log("USA map button clicked - last month");
		            drawGeoChart_USA(aggregatedByStateLastMonth);
	        	} else {
		        	console.log("USA map button clicked - last year");
		            drawGeoChart_USA(aggregatedByStateLastYear);
	        	}
	        	showOverlay("map-usa");
	        });

	        // See All (geo) button shows all for Month or Year (based on current selection)
	        $(".geo.see-more.toggle-btn").click(function() {
	        	if ($(".geo.date-toggle .toggle-btn input[type=radio]").first().parent().hasClass("success")) {
		        	console.log("geo show all button clicked - last month");
		            showViewsByCity(aggregatedByCityLastMonth, "geo-list-all");
	        	} else {
		        	console.log("geo show all button clicked - last year");
		            showViewsByCity(aggregatedByCityLastYear, "geo-list-all");
	        	}
	        	showOverlay("geo-list");
	        });

	        // See All (domain) button shows all for Month or Year (based on current selection)
	        $(".domain.see-more.toggle-btn").click(function() {
            	if ($(".domanin.date-toggle .toggle-btn input[type=radio]").first().parent().hasClass("success")) {
    	        	console.log("domain show all button clicked - last month");
    	            showViewsByDomain(aggregatedByDomainLastMonth, "domain-list-all");
            	} else {
    	        	console.log("domain show all button clicked - last year");
    	            showViewsByDomain(aggregatedByDomainLastYear, "domain-list-all");
            	}
		        showOverlay("domain-list");
	        });

	        // See All (related people) button shows all
	        $(".related-people.see-more.toggle-btn").click(function() {
	        	console.log("related people show all button clicked");
	            showRelatedPeople(aggregatedByAlsoViewed, "related-people-list-all");
		        showOverlay("related-people-list");
	        });

	        function getViewerId() {
	        	var viewerHomePage = viewerData[FOAF("workplaceHomepage")];
				var viewerUrlParts = viewerHomePage.split("/");
				var viewerId = viewerUrlParts[viewerUrlParts.length-1];
				return viewerId;
	        }
	  
		  	function fetchData(callback) {
				var viewerId = getViewerId();
				var pagePath = encodeURIComponent("=~/" + viewerId);

				var earliest_start_date = "2009-12-01"
				var today = new Date().yyyy_mm_dd();

				var query = {
					'ids': 'ga:23439892',
			    	'metrics': 'ga:uniquePageviews',
			        'dimensions': 'ga:date,ga:country,ga:region,ga:city,ga:networkLocation',
			        'filters': 'ga:pagePath' + pagePath,
			        'start-date': earliest_start_date,
			        'end-date': today
			    }

				var query_string = "";
				for (var key in query) {
				   if (query.hasOwnProperty(key)) {
				      query_string = query_string + key + "=" + query[key] + "&"; 
				   }
				}
				query_string = query_string.slice(0,-1); // remove the "&" at the end of query_string

		        url = "https://www.googleapis.com/analytics/v3/data/ga?" + query_string;
		        
		        var params = {};		
		        params[gadgets.io.RequestParameters.CONTENT_TYPE] =
		          	gadgets.io.ContentType.TEXT;
		        params[gadgets.io.RequestParameters.AUTHORIZATION] =
		          	gadgets.io.AuthorizationType.OAUTH2;
		        params[gadgets.io.RequestParameters.METHOD] =
		          	gadgets.io.MethodType.GET;
		        params[gadgets.io.RequestParameters.OAUTH_SERVICE_NAME] = "googleAPIv3";
		        params[gadgets.io.RequestParameters.REFRESH_INTERVAL] = "0";

		        gadgets.io.makeRequest(url, function (response) {
		        	console.log("response via oauth2")
		        	console.log(response);
		          	if (response.oauthApprovalUrl) {
		        		console.log("OAuth Approval URL:")
		        		console.log(response.oauthApprovalUrl);
		            
		          	} else if (response.data) {
						var data = JSON.parse(response.data);
						console.log(data.rows);
		      		 	aggregatedByMonthAll = aggregateDataByMonth(data.rows);
				 		aggregatedByMonthLastYear = aggregateDataByMonth(data.rows, getYearMonthOneYearAgoMonthStart());
				 		aggregatedByCityLastYear = aggregateDataByCity(data.rows, dateOneYearAgo().yyyymmdd());
				 		aggregatedByCityLastMonth = aggregateDataByCity(data.rows, dateThirtyDaysAgo().yyyymmdd());
				 		aggregatedByStateLastYear = aggregateDataByState(data.rows, dateOneYearAgo().yyyymmdd());
				 		aggregatedByStateLastMonth = aggregateDataByState(data.rows, dateThirtyDaysAgo().yyyymmdd());
				 		aggregatedByCountryLastYear = aggregateDataByCountry(data.rows, dateOneYearAgo().yyyymmdd());
				 		aggregatedByCountryLastMonth = aggregateDataByCountry(data.rows, dateThirtyDaysAgo().yyyymmdd());
				 		aggregatedByDomainLastYear = aggregateDataByDomain(data.rows, dateOneYearAgo().yyyymmdd());
		      			aggregatedByDomainLastMonth = aggregateDataByDomain(data.rows, dateThirtyDaysAgo().yyyymmdd());
		      			
		      			showVisitorCountStats();
						drawColumnChart(aggregatedByMonthLastYear);

		      			showViewsByCity(aggregatedByCityLastMonth, "geo-list", 10);
		      			showViewsByDomain(aggregatedByDomainLastMonth, "domain-list", 10);

		          	} else {
			      		console.log("Error:")
			      		console.log(response.data);
			      		console.log(response.oauthError);
			      		console.log(response.oauthErrorUri);
			      		console.log(response.oauthErrorText);
			      		console.log(response.oauthErrorExplanation);
			      		console.log(response.oauthErrorTrace);
		          	}
		        }, params);
		        callback();
	    	}

			function fetchPagePathData() {
				var viewerId = getViewerId();
				var pagePath = encodeURIComponent("=~/" + viewerId);

				var earliest_start_date = "2009-12-01"
				var today = new Date().yyyy_mm_dd();

				var query = {
					'ids': 'ga:23439892',
			    	'metrics': 'ga:uniquePageviews',
			        'dimensions': 'ga:date,ga:pagePathLevel1,ga:landingPagePath,ga:secondPagePath,ga:exitPagePath,ga:previousPagePath,ga:nextPagePath',
					'filters': 'ga:pagePath' + pagePath,
			        'start-date': earliest_start_date,
			        'end-date': today
			    }

				var query_string = "";
				for (var key in query) {
				   if (query.hasOwnProperty(key)) {
				      query_string = query_string + key + "=" + query[key] + "&"; 
				   }
				}
				query_string = query_string.slice(0,-1); // remove the "&" at the end of query_string

		        url = "https://www.googleapis.com/analytics/v3/data/ga?" + query_string;
		        
		        var params = {};		
		        params[gadgets.io.RequestParameters.CONTENT_TYPE] =
		          	gadgets.io.ContentType.TEXT;
		        params[gadgets.io.RequestParameters.AUTHORIZATION] =
		          	gadgets.io.AuthorizationType.OAUTH2;
		        params[gadgets.io.RequestParameters.METHOD] =
		          	gadgets.io.MethodType.GET;
		        params[gadgets.io.RequestParameters.OAUTH_SERVICE_NAME] = "googleAPIv3";
		        params[gadgets.io.RequestParameters.REFRESH_INTERVAL] = "0";

		        gadgets.io.makeRequest(url, function (response) {
		        	console.log("response via oauth2")
		        	console.log(response);
		          	if (response.oauthApprovalUrl) {
		        		console.log("OAuth Approval URL:")
		        		console.log(response.oauthApprovalUrl);
		            
		          	} else if (response.data) {
						var data = JSON.parse(response.data);
						console.log(data.rows);
						aggregatedByAlsoViewed = aggregateDataByAlsoViewed(data.rows);
						showRelatedPeople(aggregatedByAlsoViewed, "related-people-list", 5);

		          	} else {
			      		console.log("Error:")
			      		console.log(response.data);
			      		console.log(response.oauthError);
			      		console.log(response.oauthErrorUri);
			      		console.log(response.oauthErrorText);
			      		console.log(response.oauthErrorExplanation);
			      		console.log(response.oauthErrorTrace);
		          	}
		        }, params);
	    	}

	    			
			// Format Google Analytics yearMonth string (ex: 201506) as Mmm-YYYY (ex: Jun-2015)
			function formatMonthYear(yearMonthString) {
			  	var months = new Array('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'); 
				var year, month_number, month;
			
				year = yearMonthString.substring(2, 4);
				month_number = yearMonthString.substring(4, 6) - 1;
				month = months[month_number];
				new_value = month + "-" + year;
				return new_value;
			}

	    	function dateOneYearAgo() {
				var today = new Date();
			 	var oneYearAgo = new Date(today.getFullYear() - 1, today.getMonth(), today.getDay());
			 	return oneYearAgo;
	    	}

	    	function dateThirtyDaysAgo() {
				var today = new Date();
				var thirtyDaysAgo = new Date(today.setDate(today.getDate()-30));
			 	return thirtyDaysAgo;
	    	}

		    function drawColumnChart(data) {
				console.log("drawColumnChart called")
			
		        // Create the data table.
		        var data_table = new google.visualization.DataTable();
		        data_table.addColumn('string', 'Month');
		        data_table.addColumn('number', 'Views');
			    data_table.addColumn({type: 'string', role: 'style'});
				populateDataTable_ColumnChart(data_table, data);

		        // Set chart options
		        var options = {
					legend: {position: 'none'}
			    };

		        // Instantiate and draw our chart, passing in some options.
		        var chart = new google.visualization.ColumnChart(document.getElementById('chart_container'));
		        chart.draw(data_table, options);
	      	}

		    function drawGeoChart_World(data) {
				console.log("drawGeoChart_World called")
			
		        // Create the data table.
		        var data_table = new google.visualization.DataTable();
		        data_table.addColumn('string', 'Country');
		        data_table.addColumn('number', 'Views');
				populateDataTable_GeoChart(data_table, data);

        		var options = {
		            colorAxis: {colors: ["#FFCC00", "#FF0000"]},
        		};
        		var chart = new google.visualization.GeoChart(document.getElementById("geo-chart-world"));
		        chart.draw(data_table, options);
	      	}

		    function drawGeoChart_USA(data) {
				console.log("drawGeoChartUSA called")
			
		        // Create the data table.
		        var data_table = new google.visualization.DataTable();
		        data_table.addColumn('string', 'State');
		        data_table.addColumn('number', 'Views');
				populateDataTable_GeoChart(data_table, data);

        		var options = {
	        		region: "US",
	        		resolution: "provinces",
		            colorAxis: {colors: ["#FFCC00", "#FF0000"]},
        		};
        		var chart = new google.visualization.GeoChart(document.getElementById("geo-chart-usa"));
		        chart.draw(data_table, options);
	      	}

	      	function aggregateDataByMonth(data, yearMonthStart) {

	      		var start = yearMonthStart || 0;
	      		var lastItemIndex = data.length-1; 
	      		var lastIndex = data[0].length-1;

				var monthArray = data.map(function(elem) {
				    return elem[0].slice(0, -2);
				});

				var filteredMonthArray = monthArray.filter(function(elem, i, array) {
				        return array.indexOf(elem) === i && elem >= start;
				    }
				);

				var arrayToReturn = filteredMonthArray.map(function(month) {
				    var count = data.reduce(function(prevVal, elem) {
				        if(elem[0].slice(0, -2) == month) {
				            return prevVal + parseInt(elem[lastIndex]);
				        } 
				        else {
				            return prevVal;
				        }
				    }, 0);
				    return new Array(month, count); 
				});

				// add a row for the current month if one doesn't exist
				var today = new Date();
				var thisYearMonth = convertDateToYearMonthString(today);

				var lastItem = data[lastItemIndex];
				if (lastItem[0].slice(0, -2) != thisYearMonth) {
					var rowToAdd = new Array(thisYearMonth, 0);
					arrayToReturn.push(rowToAdd);
				}

				return arrayToReturn;
	      	}

	      	function populateDataTable_ColumnChart(dataTable, dataToAdd) {
				for (idx in dataToAdd) {
					row = dataToAdd[idx];
					lastIndex = row.length-1;
					dataTableRow = new Array();
					dataTableRow[0] = formatMonthYear(row[0]);
					dataTableRow[1] = row[lastIndex];
					dataTableRow[2] = "color: #F26D04";
					dataTable.addRow(dataTableRow);
				}
				// remove the last row, which contains data for this month (we show this data elsewhere)
				var lastItemIndex = dataTable.getNumberOfRows()-1;
				dataTable.removeRow(lastItemIndex);
			}

	      	function populateDataTable_GeoChart(dataTable, dataToAdd) {
				for (idx in dataToAdd) {
					row = dataToAdd[idx];
					lastIndex = row.length-1;
					dataTableRow = new Array();
					dataTableRow[0] = row[0];
					dataTableRow[1] = row[lastIndex];
					dataTable.addRow(dataTableRow);
				}
			}
	  
		  	function showVisitorCountStats() {
			  	var viewerFirstName, firstNameToDisplay;
			  	
			  	viewerFirstName = viewerData[FOAF("firstName")];
			  	firstNameToDisplay = viewerFirstName + "'s";
			  	if (viewerFirstName.slice(-1) == "s") {
			  		firstNameToDisplay = firstNameToDisplay.slice(0, -1);
			  	}

				var vccLastYear = document.getElementById('view_count_last_year');
				var vccLastYearCount = calculateViewCountLastYear(aggregatedByMonthLastYear);
				vccLastYearCount.count = vccLastYearCount.count.toLocaleString(); // adds thousands separators
				vccLastYear.innerHTML = firstNameToDisplay + " profile has been viewed " + vccLastYearCount.count + " times since " + vccLastYearCount.start;
				
				var vccThisMonth = document.getElementById("view_count_this_month");
				vccThisMonthCount = calculateViewCountThisMonth(aggregatedByMonthAll);
				vccThisMonthCount = vccThisMonthCount.toLocaleString(); // adds thousands separators
				vccThisMonth.innerHTML = vccThisMonthCount;
			
				var vccBestMonth = document.getElementById("view_count_best_month");
				vccBestMonthCount = calculateViewCountBestMonth(aggregatedByMonthAll);
				vccBestMonthCount = vccBestMonthCount.toLocaleString(); // adds thousands separators
				vccBestMonth.innerHTML = vccBestMonthCount;
			
				var vccAllTime = document.getElementById("view_count_all_time");
				vccAllTimeCount = calculateViewCountAllTime(aggregatedByMonthAll);
				vccAllTimeCount.count = vccAllTimeCount.count.toLocaleString(); // adds thousands separators
				vccAllTime.innerHTML = vccAllTimeCount.count;
			
				var vccAllTimeSince = document.getElementById("view_count_all_time_since");
				vccAllTimeSince.innerHTML = "Since " + vccAllTimeCount.start + "*";
		  	}

		  	function showViewsByCity(data, tableToUpdateID, onlyShowN) {
		  		var dataToShow, index, item, countryName, countryCode, regionName, cityName, geoString, count;

		  		$("#" + tableToUpdateID + " tr").remove(); //Remove any existing rows before adding new ones

		  		// filter out data that we don't want to display
		  		if (onlyShowN > 0) {
		  			dataToShow = data.slice(0, onlyShowN);
		  			if (data.length > dataToShow.length) {
		  				$(".geo.see-more.toggle-btn").removeClass("visuallyhidden"); //Unhide the See All button 
		  			} else {
			  			dataToShow = data;
		  				$(".geo.see-more.toggle-btn").addClass("visuallyhidden"); //Hide the See All button 
		  			}
		  		} else {
		  			dataToShow = data;
		  		}

		  		// add table rows for dataToShow
		  		for (index in dataToShow) {
		  			item = dataToShow[index];
		  			countryName = item[0];
		  			countryCode = getCountryCode(countryName);
		  			regionName = item[1];
		  			cityName = item[2];
		  			geoString = cityName  + ", " + regionName;
		  			if (geoString.indexOf("(not set)") > -1) {
		  				geoString = geoString.replace("(not set), ", "");
		  				geoString = geoString.replace(", (not set)", "");
		  			}
		  			count = item[3];

					//TODO: Fix this path
			  		$("#" + tableToUpdateID).append("<tr><td><img src=http://cranestylelabs.github.io/personal-stats-gadget/images/flag_icons/"+ countryCode + ".gif></img></td><td>" + geoString + "</td><td>" + count + "</td></tr>");
		  		}

		  		$("#" + tableToUpdateID + " tr").addClass("panel-list-row"); 					//Add CSS class to the table rows
			    $("#" + tableToUpdateID + " tr td:first-child").addClass("panel-list-image"); 	//Add CSS class to the first item in each row
				$("#" + tableToUpdateID + " tr td:last-child").addClass("panel-list-count");  	//Add CSS class to the last item in each row
		  	}

		  	function showViewsByDomain(data, tableToUpdateID, onlyShowN) {
		  		var dataToShow, index, item, domainName, count;

				$("#" + tableToUpdateID + " tr").remove(); //Remove any existing rows before adding new ones

		  		// filter out data that we don't want to display
		  		if (onlyShowN > 0) {
		  			dataToShow = data.slice(0, onlyShowN);
		  			if (data.length > dataToShow.length) {
		  				$(".domain.see-more.toggle-btn").removeClass("visuallyhidden"); //Unhide the See All button 
		  			} else {
			  			dataToShow = data;
		  				$(".domain.see-more.toggle-btn").addClass("visuallyhidden"); //Hide the See All button 
		  			}
		  		} else {
		  			dataToShow = data;
		  		}

		  		// add table rows for dataToShow
		  		for (index in dataToShow) {
		  			item = dataToShow[index];
		  			domainName = item[0];
		  			count = item[1];

			  		$("#" + tableToUpdateID).append("<tr><td>" + domainName + "</td><td>" + count + "</td></tr>");
		  		}

		  		$("#" + tableToUpdateID + " tr").addClass("panel-list-row"); 					//Add CSS class to the table rows
				$("#" + tableToUpdateID + " tr td:last-child").addClass("panel-list-count"); 	//Add CSS class to the last item in each row
		  	}

		  	function showRelatedPeople(data, divToUpdateID, onlyShowN) {
		  		var dataToShow, index, item, link, count;
		  		var hostName = "profiles.ucsf.edu";

				$("#" + divToUpdateID + " p").remove(); //Remove any existing rows before adding new ones

		  		// filter out data that we don't want to display
		  		if (onlyShowN > 0) {
		  			dataToShow = data.slice(0, onlyShowN);
		  			if (data.length > dataToShow.length) {
		  				$(".related-people.see-more.toggle-btn").removeClass("visuallyhidden"); //Unhide the See All button 
		  			} else {
			  			dataToShow = data;
		  				$(".related-people.see-more.toggle-btn").addClass("visuallyhidden"); //Hide the See All button 
		  			}
		  		} else {
		  			dataToShow = data;
		  		}

		  		// add table rows for dataToShow
		  		for (index in dataToShow) {
		  			item = dataToShow[index];
		  			link = hostName + item[0];

			  		$("#" + divToUpdateID).append("<p><a href=" + link + ">" + link + "</a></p>");
		  		}

		  		$("#" + divToUpdateID + " p").addClass("panel-text"); //Add CSS class to paragraphs
		  	}

		  	function getCountryCode(countryName) {
		  		var returnValue = "";
		  		var filteredList = countryCodeList.filter(function(item) { 
		  		    return item.name === countryName;
		  		});
		  		if (filteredList[0]) {
		  			return filteredList[0].code.toLowerCase()
		  		}
		  		return returnValue;
		  	}
			
			function getYearMonthOneYearAgoMonthStart() {
		 		var today = new Date();
			 	var start_date = new Date(today.getFullYear() - 1, today.getMonth(), 1);
			 	var start_date_string = convertDateToYearMonthString(start_date);
				return start_date_string;
			}

			function convertDateToYearMonthString(date) {
			 	var month_numbers = new Array('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12');
			 	var date_string = date.getFullYear() + month_numbers[date.getMonth()];
			 	return date_string;
			}
		  
		  	function calculateViewCountLastYear(data) {
			  	var i, row, lastIndex;
				
			  	var firstRow = data[0];
	  		  	var lastIndex = firstRow.length-1;
				var count = data.reduce(function(prevVal, elem) {
				    return prevVal + parseInt(elem[lastIndex]);
				}, 0);

	  		  	var start = firstRow[0];
				start = formatMonthYear(start);
				start = start.replace("-", " 20");
				
				var viewCount = {
					count: count,
					start: start
				}
				
				return viewCount;
		  	}
		
			function calculateViewCountThisMonth(data) {
				var lastRowIndex = data.length-1;
				var lastRow = data[lastRowIndex];
				var lastIndex = lastRow.length-1;
				return parseInt(lastRow[lastIndex]);
				//TODO: Need to handle 1st of month where there is no Analytics data yet.
			}
			
			function calculateViewCountBestMonth(data) {
				var i, row, lastIndex;
				var highestCount = 0;
				
				for (i = 0; i < data.length; i++) {
				  	row = data[i];
				  	lastIndex = row.length-1;
					if (parseInt(row[lastIndex]) > highestCount) {
						highestCount = row[lastIndex];
					}
				}
				return parseInt(highestCount);
			}
		
			function calculateViewCountAllTime(data) {
				var i, row, lastIndex, currentRowVal;
				var count = 0;
				var start = "";
				var checkStart = true;
		
				for (i = 0; i < data.length; i++) {
		  		  	row = data[i];
		  		  	lastIndex = row.length-1;
					currentRowVal = parseInt(row[lastIndex]);
					count = count + currentRowVal;
					
					// find the first month with data
					if (checkStart == true) {
						start = row[0];
						if (currentRowVal > 0) {
							checkStart = false;
						}
					}
				}

				// Format for viewing after counting is done
				start = formatMonthYear(start);
				start = start.replace("-", " 20");
				
				var viewCount = {
					count: count,
					start: start
				}
				
				return viewCount;
			}

	      	function aggregateDataByCity(data, dateStart) {

				var start = dateStart || 0
	      		var lastIndex = data[0].length-1;

				var dataFilteredByDate = data.filter(function(elem, i, array) {
				        return array.indexOf(elem) === i && elem[0] >= start;
				    }
				);

				var uniques = dataFilteredByDate.map(function(elem) {
				    return elem[1] + "_" + elem[2] + "_" + elem[3];
				});

				var filteredArray = uniques.filter(function(elem, i, array) {
				        return array.indexOf(elem) === i;
				    }
				);

				var arrayToReturn = filteredArray.map(function(unique_value) {
				    var count = dataFilteredByDate.reduce(function(prevVal, elem) {
				        if(elem[1] + "_" +elem[2] + "_" +elem[3] == unique_value) {
				            return prevVal + parseInt(elem[lastIndex]);
				        } 
				        else {
				            return prevVal;
				        }
				    }, 0);
				    var splits = unique_value.split("_");
				    return new Array(splits[0], splits[1], splits[2], count); 
				});

				// sort by views, descending
				arrayToReturn.sort(function(a,b) {
				    return b[3]-a[3]
				});

				fixCountryNames(arrayToReturn);

				return arrayToReturn;
			}

	      	function aggregateDataByState(data, dateStart) {
	      		
				var start = dateStart || 0
	      		var lastIndex = data[0].length-1;

				var dataFilteredByDate = data.filter(function(elem, i, array) {
				        return array.indexOf(elem) === i && elem[0] >= start;
				    }
				);

				var onlyUSA = dataFilteredByDate.filter(function(elem, i, array) {
				        return array.indexOf(elem) === i && elem [1]== "United States";
				    }
				);

				var uniques = onlyUSA.map(function(elem) {
				    return elem[2];
				});

				var filteredArray = uniques.filter(function(elem, i, array) {
				        return array.indexOf(elem) === i;
				    }
				);

				var arrayToReturn = filteredArray.map(function(unique_value) {
				    var count = dataFilteredByDate.reduce(function(prevVal, elem) {
				        if(elem[2] == unique_value) {
				            return prevVal + parseInt(elem[lastIndex]);
				        } 
				        else {
				            return prevVal;
				        }
				    }, 0);
				    return new Array(unique_value, count); 
				});

				// sort by views, descending
				arrayToReturn.sort(function(a,b) {
				    return b[3]-a[3]
				});

				console.log("arrayToReturn");
				console.log(arrayToReturn);

				return arrayToReturn;
			}

	      	function aggregateDataByCountry(data, dateStart) {
	      		
				var start = dateStart || 0
	      		var lastIndex = data[0].length-1;

				var dataFilteredByDate = data.filter(function(elem, i, array) {
				        return array.indexOf(elem) === i && elem[0] >= start;
				    }
				);

				var countryArray = dataFilteredByDate.map(function(elem) {
				    return elem[1];
				});

				var filteredCountryArray = countryArray.filter(function(elem, i, array) {
				        return array.indexOf(elem) === i;
				    }
				);

				var arrayToReturn = filteredCountryArray.map(function(country) {
				    var count = dataFilteredByDate.reduce(function(prevVal, elem) {
				        if(elem[1] == country) {
				            return prevVal + parseInt(elem[lastIndex]);
				        } 
				        else {
				            return prevVal;
				        }
				    }, 0);
				    return new Array(country, count); 
				});

				// sort by views, descending
				arrayToReturn.sort(function(a,b) {
				    return b[1]-a[1]
				});

				fixCountryNames(arrayToReturn);

				return arrayToReturn;
			}

			function fixCountryNames(arr) {
				var idx, item;
				for (idx in arr) {
					item = arr[idx];
					if(item[0] == "Côte d’Ivoire" || item[0] == "Côte d'Ivoire") {
						item[0] = "Cote d'Ivoire";
					}
				}
			}


	      	function aggregateDataByDomain(data, dateStart) {

				var start = dateStart || 0
	      		var lastIndex = data[0].length-1;

				var dataFilteredByDate = data.filter(function(elem, i, array) {
				        return array.indexOf(elem) === i && elem >= start;
				    }
				);

				var domainArray = dataFilteredByDate.map(function(elem) {
				    return elem[4];
				});

				var filteredDomainArray = domainArray.filter(function(elem, i, array) {
				        return array.indexOf(elem) === i;
				    }
				);

				var arrayToReturn = filteredDomainArray.map(function(domain) {
				    var count = dataFilteredByDate.reduce(function(prevVal, elem) {
				        if(elem[4] == domain) {
				            return prevVal + parseInt(elem[lastIndex]);
				        } 
				        else {
				            return prevVal;
				        }
				    }, 0);
				    return new Array(domain, count); 
				});

				// sort by views, descending
				arrayToReturn.sort(function(a,b) {
				    return b[1]-a[1]
				});

				return arrayToReturn;
			}

	      	function aggregateDataByAlsoViewed(data, dateStart) {
	      		var regEx = new RegExp("^/([a-z][a-z-\.]+)$");
	      		var viewersPage = "/" + getViewerId();
			      		
				var start = dateStart || 0
	      		var lastIndex = data[0].length-1;

				var dataFilteredByDate = data.filter(function(elem, i, array) {
				    return array.indexOf(elem) === i && elem[0] >= start;
				});

				// clear out any values that are not profiles page ids, and clear out the viewer's page id
				var cleanedData = dataFilteredByDate.map(function (item) {
					return item.filter( function (elem) {
						return regEx.test(elem) && elem != viewersPage;
					});
				});

				// de-dupe each array returned above (we want arrays to contain no duplicates, but duplicates across arrays are fine)
				var dedupedData = cleanedData.map(function (item) {
					return item.filter( function (elem, i, array) {
						return array.indexOf(elem) === i;
					});
				});

				// remove any empty arrays returned above
				var validData = dedupedData.filter( function (elem) {
    				return elem.length > 0;
				});

				var collapsed = [];
				collapsed = (collapsed.concat.apply(collapsed, validData)).filter(function(elem) {
					return elem;
				});

				var uniques = collapsed.filter(function(elem, i, array) {
				        return array.indexOf(elem) === i;
				    }
				);

				var arrayToReturn = uniques.map( function(uniqueVal, i) {
					var count = collapsed.reduce(function(prevVal, elem, i) {
				        if(elem == uniqueVal) {
				            return prevVal + 1;
				        } 
				        else {
				            return prevVal;
				        }
				    }, 0);
				    return new Array(uniqueVal, count); 
				});
				
				// sort by number of pageViews, descending
				arrayToReturn.sort(function(a,b) {
				    return b[1]-a[1];
				});

				return arrayToReturn;
			}

			// function to show our overlays
			function showOverlay(whichoverlay){
			    var docHeight = $(document).height(); //grab the height of the page
			    var scrollTop = $(window).scrollTop(); //grab the px value from the top of the page to where you're scrolling
			    $(".overlay-bg").show().css({"height" : docHeight}); //display your overlay background and set height to the page height
			    $(".overlay-"+whichoverlay).show().css({"top": scrollTop+200+"px"}); //show the appropriate overlay and set the content 200px from the window top
			}

			// function to close our overlays
			function closeOverlay(){
			    $('.overlay-bg, .overlay-content').hide(); //hide the overlay
			}
			
			// hide overlay when user clicks on close button or if user clicks anywhere outside the container
			$('.close-btn, .overlay-bg').click(function(){
			    closeOverlay();
			});
			
			// hide the overlay when user presses the esc key
			$(document).keyup(function(e) {
			    if (e.keyCode == 27) { // if user presses esc key
			        closeOverlay();
			    }
			});
		
			function init() {

				osapi.jsonld.getViewer().execute(function(viewer_data) {
					framePerson(viewer_data, function(viewerObj) {
						viewerData = viewerObj;
						console.log("viewerData");
						console.log(viewerData);

						//TODO: Fix this path
						$.getJSON("http://cranestylelabs.github.io/personal-stats-gadget/countries.json", function(response){
						    countryCodeList = response;
					        populateInstructionsPanel();
					  		fetchData( function () {
					  			fetchPagePathData();
					  		});
						});
					});
				});
			}
	
        	gadgets.util.registerOnLoadHandler(init);
	  
		</script>
	]]></Content>
</Module>