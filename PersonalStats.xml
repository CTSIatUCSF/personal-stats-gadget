<?xml version="1.0" encoding="UTF-8"?>
<Module>
	<ModulePrefs title="Personal Stats" author="Dan Hoffman">
		<OAuth2>
		  <Service name="googleAPIv3" scope="https://www.googleapis.com/auth/analytics.readonly">
		  </Service>
		</OAuth2>
		<Require feature="views"/>
		<Require feature="settitle"/>
		<Require feature="osapi"/>
		<!-- Require feature="minimessage" /-->
		<!-- Require feature="dynamic-height" /-->
		<Require feature="orng"/>
		<Require feature="jsonld"/>
		<!-- Require feature="start-hidden" /-->
		<Require feature="setprefs" />
	</ModulePrefs>
	<Content type="html" view="canvas, small"><![CDATA[<!--HTML-->
    <!DOCTYPE html>
    
        <!-- #includes -->
        <link rel="stylesheet" href="css/gadget.css" type="text/css" media="screen, projection" >
        <link rel="stylesheet" href="css/inst.css" type="text/css" media="screen, projection" >
        <link rel="stylesheet" href="css/jquery-ui.min.css" type="text/css" media="screen, projection" >
	    <script type="text/javascript" src="js/os.js" ></script>
	    <script type="text/javascript" src="js/ontology.js" ></script>
        <script type="text/javascript" src="js/jquery-1.11.1.min.js"></script>
        <script type="text/javascript" src="js/jquery-ui.min.js"></script>
        <script type="text/javascript" src="js/jsonld.js" ></script>
        <script type="text/javascript" src="js/environment.js"></script>
                
        <style>
            .tool_title {font-size:14px;}
            .tool_title_orange {font-weight:bold; font-size:14px; color:#CA7C29;margin-top:-1px;}
            .tool_body {font-size:12px;}
            .tool_credit {font-size:10px;}
            .tool_table_cell {ffont-size:12px; padding:0 20px 0 0;}
            .tool_table_cell_small {font-size:11px;}
            .tool_table_cell_small span a {font-size:11px;}
            .tool_table_cell_small span {font-size:11px;display:inline-block;margin-right: -15px; }
            .tool_toggle_button {font-size: 13px;padding:0 5px;}          
    	</style>

        <script type="text/javascript">
        	
        	Date.prototype.yyyy_mm_dd = function() {
        		var yyyy = this.getFullYear().toString();
        	    var mm = (this.getMonth()+1).toString(); // getMonth() is zero-based
        	    var dd  = this.getDate().toString();
        	    return yyyy + "-" + (mm[1]?mm:"0"+mm[0]) + "-" + (dd.length===2?dd:"0"+dd[0]); // padding
        	};

        	Date.prototype.yyyymmdd = function() {
        		var yyyy = this.getFullYear().toString();
        	    var mm = (this.getMonth()+1).toString(); // getMonth() is zero-based
        	    var dd  = this.getDate().toString();
        	    return yyyy + (mm[1]?mm:"0"+mm[0]) + (dd.length===2?dd:"0"+dd[0]); // padding
        	};
        </script>]]>
	</Content>
	<Content type="html" view="small" preferred_height="75" preferred_width="190"><![CDATA[<!--HTML-->
    <!DOCTYPE html>
 
 		<table id="button_and_help" cellspacing="2" cellpadding="0" style="display:block;">
 				<tr>
 						<td class="tool_table_cell_small" style="width:160px;padding:4px 0">
							<a id="linkToCanvas"href=linkClicked()>Click here for canvas view.</a>
						</td>
 				</tr>
 		</table>
        
        <img id="waiting" src="images/waiting.gif" style="display:none;">
        
        <script type="text/javascript">
        	var ownerURI;

            function init() {

				osapi.jsonld.getOwner().execute(function(ownerData) {
					console.log("ownerData:");
					console.log(ownerData);
					ownerURI = ownerData.uris[0];

					//don't enable the link until we have the owner data
					$('#linkToCanvas').click(function(){ 
						linkToCanvasClicked();
						return false;
					});
				});
            }
			
			function linkToCanvasClicked() {
		    	gadgets.views.requestNavigateTo("canvas", {}, ownerURI);
			}
		
            gadgets.util.registerOnLoadHandler(init);
        </script>]]></Content>
	<Content type="html" view="canvas" preferred_height="1000" preferred_width="940"><![CDATA[<!--HTML-->
    <!DOCTYPE html>
           <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css">
           <script type="text/javascript" src="js/jquery.blockUI-2.66.0.js"></script>    
           <style type="text/css">
                .gadget-content {
                	height: 100%;
                	background-color: #D6EBFF;
                }
                .stats-title {
                	font-weight:bold;
                	font-size:20px;
                	color:#CA7C29;
                	padding-top:40px;
                	margin-bottom: 40px;
				    text-align: center;
                }
                .stats-chart {
                	width: 90%; 
                	margin-top: 20px;
                	margin-bottom: 20px;
				    margin-left: auto;
				    margin-right: auto;
				    border-width: 1px;
				    border-style: solid;
				    border-color: black;
                }
                .stats-table {
                	width = 100%;
                	margin-top: 20px;
                	margin-bottom: 0px;
				    margin-left: auto;
				    margin-right: auto;
				    text-align: center;
				    border-spacing: 10px;
					border-collapse: separate;
					table-layout: fixed;
                }
                .stats-table-item,
                .stats-table-item-center {
                	background-color: white;
                	width: 26%;
                	margin-top: 10px;
                	margin-bottom: 10px;
                }
                .stats-table-item-center {
                	width: 20%;
                }
                .stats-text,
                .stats-text-small,
                .stats-text-large {
                	margin: 5px;
                	font-size:14px;
                }
                .stats-text-small {
                	font-size:10px;
                }
                .stats-text-large {
                	font-size:20px;
                }
                .panel {
                	width: 45%;
                	margin: 10px;
                }
                .panel-title {
                	margin: 5px;
                	font-size:12px;
                }
                .panel-list {
                	margin: 5px;
                }
                .panel-list-row,
                .geo-list-row {
                	background-color: white;
                	margin: 2px;
                }
                .panel-list-header {

                }
                .panel-list-count {
                	text-align: right;
                	float: right;
                }
                .geo-list-row {

                }
                #geo-panel {

                }
                #geo-list {
                	width: 35%;
                	display: inline-block;
                	vertical-align: top;
                }
                #geo-list th {
                	font-size:8px;
                }
                #geo-list td {
                	font-size:10px;
                }
                #geo-list img {
                	margin-right: 5px;
                }
                #geo-chart {
                	margin: 5px;
                	display: inline-block;
                	width: 55%;
                	vertical-align: top;
                }

                // Toggle Button Stuff
                .toggle-btn-grp { 
                    margin:5px 0; 
                }
                .toggle-btn { 
                    text-align:centre; 
                    margin:5px 2px;
                    padding:0.4em 1.2em; 
                    color:#000; 
                    background-color:#FFF; 
                    border-radius:10px; 
                    display:inline-block; 
                    border:solid 1px #CCC; 
                    cursor:pointer;
                }

                .toggle-btn-grp.joint-toggle .toggle-btn { 
                    margin:5px 0;  
                    border-radius:0;
                    border-right-color:white;
                }
                .toggle-btn-grp.joint-toggle .toggle-btn:first-child { 
                    margin-left:2px; 
                    border-radius: 10px 0px 0px 10px; 
                }
                .toggle-btn-grp.joint-toggle .toggle-btn:last-child { 
                    margin-right:2px;  
                    border-radius: 0px 10px 10px 0px;
                    border-right:solid 1px #CCC;
                }

                .toggle-btn:hover { 
                    border:solid 1px #a0d5dc !important; 
                    background:#f1fdfe;
                }

                .toggle-btn.success { 
                    background:lightblue;
                    border:solid 1px blue !important; 
                }

                .visuallyhidden { 
                    border: 0; 
                    clip: rect(0 0 0 0); 
                    height: 1px; 
                    margin: -1px; 
                    overflow: hidden; 
                    padding: 0; 
                    position: absolute; 
                    width: 1px; 
                }
                .visuallyhidden.focusable:active, .visuallyhidden.focusable:focus { 
                    clip: auto; 
                    height: auto; 
                    margin: 0; 
                    overflow: visible; 
                    position: static; 
                    width: auto; 
                }
           </style>
    
        <div class="gadget-content">
    		<div id="view_count_last_year" class="stats-title">This is the Personal Stats Gadget's canvas page.</div>
    		
			<div id="chart_container" class="stats-chart"></div>

			<table id="view_count_table" class="stats-table">
				<tr>
					<td class="stats-table-item">
						<div class="stats-text">So far this month</div>
						<div id="view_count_this_month" class="stats-text-large"></div>
						<div class="stats-text">Visitors</div>
					</td>
					<td class="stats-table-item-center">
						<div class="stats-text">Best Month Ever</div>
						<div id="view_count_best_month" class="stats-text-large"></div>
						<div class="stats-text">Visitors</div>
					</td>
					<td class="stats-table-item">
						<div id="view_count_all_time_since" class="stats-text"></div>
						<div id="view_count_all_time" class="stats-text-large"></div>
						<div class="stats-text">Visitors</div>
						<div class="stats-text-small">* First month data is available for your profile page</div>
					</td>
				</tr>
			</table>
			<div id="geo-panel" class="panel">
				<div class="panel-title">Views By Country</div>
				<div class="panel-button-area">
					<div class="toggle-btn-grp joint-toggle">
					    <label onclick="" class="toggle-btn"><input type="radio" name="countryToggle"/>Last 30 Days</label><label onclick="" class="toggle-btn"><input type="radio" name="countryToggle"/>Last Year</label>
					</div>
				</div>
				<div class="panel-data-area">
					<table id="geo-list" class="panel-list"></table>
					<div id="geo-chart"></div>
				</div>
			</div>
	    </div>

		<!-- Include libraries for getting Auth token using JWS -->
		<script type="text/javascript" src="http://kjur.github.io/jsrsasign/jsrsasign-latest-all-min.js"></script>
		<script type="text/javascript" src="js/json-sans-eval-min.js"></script>
		<script type="text/javascript" src="js/jws-3.2.min.js"></script>
	
		<!--Load the AJAX API-->
		<script type="text/javascript" src="https://www.google.com/jsapi"></script>
	
		<!--Load the Google JS Client-->
		<script type="text/javascript" src="https://apis.google.com/js/client.js?onload=handleClientLoad"></script>
	
		<!-- Load Google Analytics Embed API Library -->
		<script>
			(function(w,d,s,g,js,fs){
			  g=w.gapi||(w.gapi={});g.analytics={q:[],ready:function(f){this.q.push(f);}};
			  js=d.createElement(s);fs=d.getElementsByTagName(s)[0];
			  js.src='https://apis.google.com/js/platform.js';
			  fs.parentNode.insertBefore(js,fs);js.onload=function(){g.load('analytics');};
			}(window,document,'script'));
		</script>
	
		<script language="JavaScript" type="text/javascript">

			var ownerData, token, ga_key, aggregatedByMonthAll, aggregatedByMonthLastYear, aggregatedByCountryLastYear, aggregatedByCountryLastMonth, countryCodeList;

	        // Load the Visualization API and the column chart package.
	        google.load("visualization", "1.0", {"packages":["corechart", "geochart"]});

	        // Set up the toggle buttons
	        $(".toggle-btn input[type=radio]").addClass("visuallyhidden");
	        $(".toggle-btn input[type=radio]").change(function() {
	            if( $(this).attr("name") ) {
	                $(this).parent().addClass("success").siblings().removeClass("success")
	            } else {
	                $(this).parent().toggleClass("success");
	            }
	        });
	        $(".toggle-btn input[type=radio]").first().click(function() {
	            console.log("month selected");
	            showViewsByCountry(aggregatedByCountryLastMonth);
	            drawGeoChart(aggregatedByCountryLastMonth);
	        });

	        $(".toggle-btn input[type=radio]").last().click(function() {
	            console.log("year selected");
	            showViewsByCountry(aggregatedByCountryLastYear);
	            drawGeoChart(aggregatedByCountryLastYear);
	        });

	        // Turn on the first toggle button
	        $(".toggle-btn input[type=radio]").first().parent().addClass("success");
	  
		  	function fetchData() {

				var ownerUrlParts = ownerData.jsonld.workplaceHomepage.split("/");
				var ownerId = ownerUrlParts[ownerUrlParts.length-1];
				var pagePath = encodeURIComponent("=~/" + ownerId);

				var earliest_start_date = "2009-12-01"
				var today = new Date().yyyy_mm_dd();

				var query = {
					'ids': 'ga:23439892',
			    	'metrics': 'ga:sessions',
			        'dimensions': 'ga:date,ga:country,ga:networkDomain',
					'filters': 'ga:pagePath' + pagePath,
			        'start-date': earliest_start_date,
			        'end-date': today
			    }

				var query_string = "";
				for (var key in query) {
				   if (query.hasOwnProperty(key)) {
				      query_string = query_string + key + "=" + query[key] + "&"; 
				   }
				}
				query_string = query_string.slice(0,-1); // remove the "&" at the end of query_string
			 	console.log(query_string);

		        url = "https://www.googleapis.com/analytics/v3/data/ga?" + query_string;
		        
		        var params = {};		
		        params[gadgets.io.RequestParameters.CONTENT_TYPE] =
		          	gadgets.io.ContentType.TEXT;
		        params[gadgets.io.RequestParameters.AUTHORIZATION] =
		          	gadgets.io.AuthorizationType.OAUTH2;
		        params[gadgets.io.RequestParameters.METHOD] =
		          	gadgets.io.MethodType.GET;
		        params[gadgets.io.RequestParameters.OAUTH_SERVICE_NAME] = "googleAPIv3";
		        params[gadgets.io.RequestParameters.REFRESH_INTERVAL] = "0";

		        gadgets.io.makeRequest(url, function (response) {
		        	console.log("response via oauth2")
		        	console.log(response);
		          	if (response.oauthApprovalUrl) {
		        		console.log("OAuth Approval URL:")
		        		console.log(response.oauthApprovalUrl);
		            
		          	} else if (response.data) {
						var data = JSON.parse(response.data);
			      		console.log("Response Data:")
		      		 	console.log(data);
		      		 	console.log("data.totalResults");
		      		 	console.log(data.totalResults);
			      		console.log("data.rows:")
		      		 	console.log(data.rows);
		      		 	aggregatedByMonthAll = aggregateDataByMonth(data.rows);
		      		 	console.log("aggregatedByMonthAll");
		      		 	console.log(aggregatedByMonthAll);
				 		aggregatedByMonthLastYear = aggregateDataByMonth(data.rows, getYearMonthOneYearAgoMonthStart());
		      		 	console.log("aggregatedByMonthLastYear");
		      		 	console.log(aggregatedByMonthLastYear);
				 		aggregatedByCountryLastYear = aggregateDataByCountry(data.rows, dateOneYearAgo().yyyymmdd());
		      			console.log("aggregatedByCountryLastYear");
		      			console.log(aggregatedByCountryLastYear);
		      			console.log(dateThirtyDaysAgo());
				 		aggregatedByCountryLastMonth = aggregateDataByCountry(data.rows, dateThirtyDaysAgo().yyyymmdd());
		      			console.log("aggregatedByCountryLastMonth");
		      			console.log(aggregatedByCountryLastMonth);

		      			showVisitorCountStats();
						drawColumnChart(aggregatedByMonthLastYear);

		      			showViewsByCountry(aggregatedByCountryLastMonth);
		      			drawGeoChart(aggregatedByCountryLastMonth);

		          	} else {
			      		console.log("Error:")
			      		console.log(response.data);
			      		console.log(response.oauthError);
			      		console.log(response.oauthErrorUri);
			      		console.log(response.oauthErrorText);
			      		console.log(response.oauthErrorExplanation);
			      		console.log(response.oauthErrorTrace);
		          	}
		        }, params);
	    	}
	    			
			// Format Google Analytics yearMonth string (ex: 201506) as Mmm-YYYY (ex: Jun-2015)
			function formatMonthYear(yearMonthString) {
			  	var months = new Array('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'); 
				var year, month_number, month;
			
				year = yearMonthString.substring(2, 4);
				month_number = yearMonthString.substring(4, 6) - 1;
				month = months[month_number];
				new_value = month + "-" + year;
				return new_value;
			}

	    	function dateOneYearAgo() {
				var today = new Date();
			 	var oneYearAgo = new Date(today.getFullYear() - 1, today.getMonth(), today.getDay());
			 	return oneYearAgo;
	    	}

	    	function dateThirtyDaysAgo() {
				var today = new Date();
				console.log(today.getDate()-30);
				var thirtyDaysAgo = new Date(today.setDate(today.getDate()-30));
			 	console.log(thirtyDaysAgo);
			 	return thirtyDaysAgo;
	    	}

		    function drawColumnChart(data) {
				console.log("drawColumnChart called")
			
		        // Create the data table.
		        var data_table = new google.visualization.DataTable();
		        data_table.addColumn('string', 'Month');
		        data_table.addColumn('number', 'Sessions');
			    data_table.addColumn({type: 'string', role: 'style'});
				populateDataTable_ColumnChart(data_table, data);

		        // Set chart options
		        var options = {
					legend: {position: 'none'}
			    };

		        // Instantiate and draw our chart, passing in some options.
		        var chart = new google.visualization.ColumnChart(document.getElementById('chart_container'));
		        chart.draw(data_table, options);
	      	}

		    function drawGeoChart(data) {
				console.log("drawGeoChart called")
			
		        // Create the data table.
		        var data_table = new google.visualization.DataTable();
		        data_table.addColumn('string', 'Country');
		        data_table.addColumn('number', 'Sessions');
				populateDataTable_GeoChart(data_table, data);

        		var options = {};
        		var chart = new google.visualization.GeoChart(document.getElementById("geo-chart"));
		        chart.draw(data_table, options);
	      	}

	      	function aggregateDataByMonth(data, yearMonthStart) {

	      		var start = yearMonthStart || 0;
	      		var lastItemIndex = data.length-1; 
	      		var lastIndex = data[0].length-1;

				var monthArray = data.map(function(elem) {
				    return elem[0].slice(0, -2);
				});

				var filteredMonthArray = monthArray.filter(function(elem, i, array) {
				        return array.indexOf(elem) === i && elem >= start;
				    }
				);

				var arrayToReturn = filteredMonthArray.map(function(month) {
				    var count = data.reduce(function(prevVal, elem) {
				        if(elem[0].slice(0, -2) == month) {
				            return prevVal + parseInt(elem[lastIndex]);
				        } 
				        else {
				            return prevVal;
				        }
				    }, 0);
				    return new Array(month, count); 
				});

				// add a row for the current month if one doesn't exist
				var today = new Date();
				var thisYearMonth = convertDateToYearMonthString(today);

				var lastItem = data[lastItemIndex];
				if (lastItem[0].slice(0, -2) != thisYearMonth) {
					var rowToAdd = new Array(thisYearMonth, 0);
					arrayToReturn.push(rowToAdd);
				}

				return arrayToReturn;
	      	}

	      	function populateDataTable_ColumnChart(dataTable, dataToAdd) {
		  		console.log(dataToAdd);
				for (idx in dataToAdd) {
					row = dataToAdd[idx];
					lastIndex = row.length-1;
					dataTableRow = new Array();
					dataTableRow[0] = formatMonthYear(row[0]);
					dataTableRow[1] = row[lastIndex];
					dataTableRow[2] = "color: #CA7C29";
					dataTable.addRow(dataTableRow);
				}
				// remove the last row, which contains data for this month (we show this data elsewhere)
				var lastItemIndex = dataTable.getNumberOfRows()-1;
				dataTable.removeRow(lastItemIndex);
				
				console.log(dataTable);
			}

	      	function populateDataTable_GeoChart(dataTable, dataToAdd) {
		  		var countryName;
		  		console.log(dataToAdd);
				for (idx in dataToAdd) {
					row = dataToAdd[idx];
					lastIndex = row.length-1;
					dataTableRow = new Array();
					dataTableRow[0] = row[0];
					dataTableRow[1] = row[lastIndex];
					dataTable.addRow(dataTableRow);
				}
				
				console.log(dataTable);
			}
	  
		  	function showVisitorCountStats() {

				var vccLastYear = document.getElementById('view_count_last_year');
				var vccLastYearCount = calculateViewCountLastYear(aggregatedByMonthLastYear);
				console.log(vccLastYearCount);
				vccLastYearCount.count = vccLastYearCount.count.toLocaleString(); // adds thousands separators
				vccLastYear.innerHTML = "Your profile has been viewed " + vccLastYearCount.count + " times since " + vccLastYearCount.start;
				
				var vccThisMonth = document.getElementById("view_count_this_month");
				vccThisMonthCount = calculateViewCountThisMonth(aggregatedByMonthAll);
				vccThisMonthCount = vccThisMonthCount.toLocaleString(); // adds thousands separators
				vccThisMonth.innerHTML = vccThisMonthCount;
			
				var vccBestMonth = document.getElementById("view_count_best_month");
				vccBestMonthCount = calculateViewCountBestMonth(aggregatedByMonthAll);
				vccBestMonthCount = vccBestMonthCount.toLocaleString(); // adds thousands separators
				vccBestMonth.innerHTML = vccBestMonthCount;
			
				var vccAllTime = document.getElementById("view_count_all_time");
				vccAllTimeCount = calculateViewCountAllTime(aggregatedByMonthAll);
				vccAllTimeCount.count = vccAllTimeCount.count.toLocaleString(); // adds thousands separators
				vccAllTime.innerHTML = vccAllTimeCount.count;
			
				var vccAllTimeSince = document.getElementById("view_count_all_time_since");
				vccAllTimeSince.innerHTML = "Since " + vccAllTimeCount.start + "*";
		  	}

		  	function showViewsByCountry(data) {
		  		var index, item, countryName, countryCode, count;

				// remove any existing rows before adding new ones
		  		$("#geo-list tr").remove();

		  		// add the table headers
		  		$("#geo-list").append("<tr></tr>");
		  		$("#geo-list tr").append("<th>Country</th>");
		  		$("#geo-list tr").append("<th>Views</th>");

		  		// add CSS class to the table headers
		  		$("#geo-list tr th").each(function() {
		  		  $(this).addClass("panel-list-header");
		  		});

		  		// add table data rows
		  		for (index in data) {
		  			item = data[index];
		  			countryName = item[0];
		  			countryCode = getCountryCode(countryName);
		  			count = item[1];

					//TODO: Fix this path
			  		$("#geo-list").append("<tr><td><img src=http://cranestylelabs.github.io/personal-stats-gadget/images/flag_icons/"+ countryCode + ".gif></img></td><td>" + countryName + "</td><td>" + count + "</td></tr>");
		  		}

		  		// add CSS class to the table rows
		  		$("#geo-list tr").each(function() {
		  		  $(this).addClass("panel-list-row");
		  		});

		  		// add CSS class to the last item in the row
		  		$("#geo-list tr td:last-child").each(function() {
		  		  $(this).addClass("panel-list-count");
		  		});

		  		console.log($(".panel-list-count").length);
		  	}

		  	function getCountryCode(countryName) {
		  		var returnValue = "";
		  		var filteredList = countryCodeList.filter(function(item) { 
		  		    return item.name === countryName;
		  		});
		  		if (filteredList[0]) {
		  			return filteredList[0].code.toLowerCase()
		  		}
		  		console.log(returnValue);
		  		return returnValue;
		  	}
			
			function getYearMonthOneYearAgoMonthStart() {
		 		var today = new Date();
			 	var start_date = new Date(today.getFullYear() - 1, today.getMonth(), 1);
			 	var start_date_string = convertDateToYearMonthString(start_date);
				return start_date_string;
			}

			function convertDateToYearMonthString(date) {
				console.log("date");
				console.log(date);
			 	var month_numbers = new Array('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12');
			 	var date_string = date.getFullYear() + month_numbers[date.getMonth()];
				console.log("date_string");
			 	console.log(date_string);
			 	return date_string;
			}
		  
		  	function calculateViewCountLastYear(data) {
			  	var i, row, lastIndex;
				
			  	var firstRow = data[0];
	  		  	var lastIndex = firstRow.length-1;
				var count = data.reduce(function(prevVal, elem) {
				    return prevVal + parseInt(elem[lastIndex]);
				}, 0);

	  		  	var start = firstRow[0];
				start = formatMonthYear(start);
				start = start.replace("-", " 20");
				
				var viewCount = {
					count: count,
					start: start
				}
				
				return viewCount;
		  	}
		
			function calculateViewCountThisMonth(data) {
				var lastRowIndex = data.length-1;
				var lastRow = data[lastRowIndex];
				var lastIndex = lastRow.length-1;
				return parseInt(lastRow[lastIndex]);
				//TODO: Need to handle 1st of month where there is no Analytics data yet.
			}
			
			function calculateViewCountBestMonth(data) {
				var i, row, lastIndex;
				var highestCount = 0;
				
				for (i = 0; i < data.length; i++) {
				  	row = data[i];
				  	lastIndex = row.length-1;
					if (parseInt(row[lastIndex]) > highestCount) {
						highestCount = row[lastIndex];
					}
				}
				return parseInt(highestCount);
			}
		
			function calculateViewCountAllTime(data) {
				var i, row, lastIndex, currentRowVal;
				var count = 0;
				var start = "";
				var checkStart = true;
		
				for (i = 0; i < data.length; i++) {
		  		  	row = data[i];
		  		  	lastIndex = row.length-1;
					currentRowVal = parseInt(row[lastIndex]);
					count = count + currentRowVal;
					
					// find the first month with data
					if (checkStart == true) {
						start = row[0];
						if (currentRowVal > 0) {
							checkStart = false;
						}
					}
				}

				// Format for viewing after counting is done
				start = formatMonthYear(start);
				start = start.replace("-", " 20");
				
				var viewCount = {
					count: count,
					start: start
				}
				
				return viewCount;
			}

	      	function aggregateDataByCountry(data, dateStart) {
	      		console.log(data);
	      		console.log(dateStart);

				var start = dateStart || 0
	      		var lastIndex = data[0].length-1;

				var dataFilteredByDate = data.filter(function(elem, i, array) {
				        return array.indexOf(elem) === i && elem >= start;
				    }
				);
				console.log(dataFilteredByDate);

				var countryArray = dataFilteredByDate.map(function(elem) {
				    return elem[1];
				});

				var filteredCountryArray = countryArray.filter(function(elem, i, array) {
				        return array.indexOf(elem) === i;
				    }
				);

				console.log(filteredCountryArray);

				var arrayToReturn = filteredCountryArray.map(function(country) {
				    var count = dataFilteredByDate.reduce(function(prevVal, elem) {
				        if(elem[1] == country) {
				            return prevVal + parseInt(elem[lastIndex]);
				        } 
				        else {
				            return prevVal;
				        }
				    }, 0);
				    return new Array(country, count); 
				});

				// sort by sessions, descending
				arrayToReturn.sort(function(a,b) {
				    return b[1]-a[1]
				});

				fixCountryNames(arrayToReturn);

				return arrayToReturn;
			}

			function fixCountryNames(arr) {
				var idx, item;
				console.log("fixCountryNames");
				for (idx in arr) {
					item = arr[idx];
					console.log("item");
					console.log(item);
					if(item[0] == "Côte d’Ivoire" || item[0] == "Côte d'Ivoire") {
						item[0] = "Cote d'Ivoire";
						console.log(item[0]);
					}
				}
			}
	
			function handleClientLoad() {
				console.log("google client library loaded");
			}
		
			function init() {

				osapi.jsonld.getOwner().execute(function(owner_data) {
					ownerData = owner_data;
					console.log("ownerData");
					console.log(ownerData);

					//TODO: Fix this path
					$.getJSON("http://cranestylelabs.github.io/personal-stats-gadget/countries.json", function(response){
					    countryCodeList = response;
					    console.log(countryCodeList);
				  		fetchData();
					})
				});
			}
	
        	gadgets.util.registerOnLoadHandler(init);
	  
		</script>
	]]></Content>
</Module>